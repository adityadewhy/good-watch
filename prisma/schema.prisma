// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  friends   Friend[]  @relation("UserFriends")      // Friends of the user
  friendOf  Friend[]  @relation("FriendUsers")      // Users who have this user as a friend
  watchlist Watchlist[]
  ratings   Rating[]
}

model Friend {
  id        Int     @id @default(autoincrement())
  userId    Int
  friendId  Int

  // Relations
  user      User    @relation("UserFriends", fields: [userId], references: [id])
  friend    User    @relation("FriendUsers", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // Ensure each friendship is unique
}

model Movie {
  id        Int        @id @default(autoincrement())
  title     String
  watchlist Watchlist[]
  ratings   Rating[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Watchlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  movieId   Int
  user      User    @relation(fields: [userId], references: [id])
  movie     Movie   @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Ensure each movie is unique in a user's watchlist
}

model Rating {
  id        Int     @id @default(autoincrement())
  userId    Int
  movieId   Int
  rate      Int     // You can set a range constraint in database if needed
  user      User    @relation(fields: [userId], references: [id])
  movie     Movie   @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Ensure each user rates a movie only once
}
